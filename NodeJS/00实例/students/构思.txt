1、

如果想将这两个网页做成网站，首先要创建一个服务器，

创建方法：1、Apache 2、http-server全局工具 3、原始的nodejs的http模块

要具有逻辑的网站，要处理数据和查询数据库，所以第二种不合适，所以用nodejs

在app.js中创建服务器


2、在读取资源的时候有可能会读取失败，还要响应给浏览器的话就是undefined，
所以做判断，如果没有错误，再进行下一步的操作


3、根据用户的请求做出响应，需要给用户展示两个页面（add和list)
如何展示？意味着有两段逻辑，可以通过路由来处理逻辑，
需要自定义路由（路由：地址和程序（逻辑）之间的映射关系）


4、地址 url，但是url是一个完整地址，后面还可以携带参数，而这些参数我们不要
所以需要对地址解析（parse方法）
解析之后拿出 参数

要pathname，获得了路径，根据路径处理逻辑


5、路由是开发人员自己定义，假如用户在访问 / 和 /add 的时候，给add.html
开始执行逻辑，先加载页面（如果是静态页面，fs.readfile即可；但是要做动态网站，能起到同等作用的是 模板引擎）
模板引擎（arttemplate 第三方，需要安装加载)
npm install art-template


6、将html归类到views，将css和js归类到public



7、配置完模板引擎后，写需要加载的内容，
而路由都需要调用模板引擎，所以封装一下
res.render = function(){ template() }

后面调用给 模板名字和 参数对象


8、通过add和list给 浏览器的html，浏览器要解析html，
在解析的过程中，有可能会遇到css和js也会发送一些请求，
所以要处理这些请求 （default：）

处理要根据请求的路径（pathname）
通过path来处理真实路径，然后就可以通过fs模块读取了
fs.readFile(realPath, (err, data) => {})

在发请求的时候，会请求网页图标，而我们没有这个图标，读取不到data会是undefined

而write只接收 字符类型和buffer类型，undefined是不可以的，
可以通过判断来避免，确认真正读到资源，再给浏览器响应

静态资源处理完毕，页面正常（可测试+add或+list）


9、动态添加数据 存储到一个json文件（在node当中也当成模块来处理）
存储到node服务端，通过加载json的时候,json必须要有逻辑格式数据[]

需要在前端页面 通过action写提交地址 提交到后端处理，
  需要路由，它既包含地址又包含逻辑，自定义 /create  
  用户点击后提交地址(携带参数)，发送请求，对应路由接收
  所以是通过get方式传参，解析地址获取参数，给一个叫query的对象

  然后要把数据存到json当中，每次点击多一组数据，数组格式
  若原来就有数据，所以只能做追加操作，其过程是
  1）读取所有数据（数组） 2）往数组push数据 3）将数组放回json，把db当成字符存入（方法：JSON.stringify(db) 将数组和对象变成 json字符串）


10、如果传入json时没有错误，应该 通过响应头 告诉浏览器跳转
    res.writeHead(302, { 跳转到哪 })

    存值后，要取值 通过模板展示到list页面(遍历展示)


11、删除 splice（从哪开始截，截几个） 从数组中截取一部分
    将数组的单元删除：
    如删第一条：从0开始，截1。  splice（1）
    如删第二条：从1开始，截1。  splice（1，1）
    0和1就是DOM索引值，点击后，传索引值，执行删除








