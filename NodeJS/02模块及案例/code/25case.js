


// 通过 require 既可以加载系统模块，也可以加载文件模块



// 关于 require 的使用有一些细节

// require本身是一个函数
// 传递不同的参数，其执行结果不同

// 1、当传入一个字符串时，不以 ./ 或 ../ 开头
// 会自动的当成系统模块进行加载

// require('23cart.js'); 
// 以往我们认为 路径不写.  会默认当成./（即当前）来解析


// 2、Nodejs 会自动将 .js和.json 结尾文件 视为模块
// 所以在使用 require 加载模块时，可以省略 .js和.json 后缀
// require('./23cart');

// let users = require('./24users');
// console.log(users);




// 关于 require 加载模块，还可以分为更多情况

// 3、在当前目录中存在 node_modules 这样一个特殊目录时
// 在使用 require 时，如果没有使用 ./或../（相对路径）
// 会优先去 node_modules 下查找，如果查找不到再查找父级目录
// 有没有 node_modules，如果存在，则在父级的 node_modules 下查找
// 如果父级没有 node_modules 再找父级 ......
// 如果一直 未找到node_modules 才会认为是 系统模块

// require('23cart');



// 4、也可以将模块拆分成若干小文件，将这些相关的小文件放到同一目录下
// 那么这个目录便认为是一个模块


// require('./cart'); 

// 在加载模块时，nodejs 可以省略后缀，这样就会导致歧义产生
// 例如 ./cart 即可以理解成 ./cart 这个目录 也可以理解成 ./cart.js
// 遇到这种情况时，nodejs 会优先当成 目录来对待，再去查找目录中有没有 index.js
// 如果没有找到，则表明当成目录加载失败，再尝试加载文件




// 当将多个文件放到同一目录下时，需要对此模块进行说明
// 包
// 通常将模块形象的称为 包，当需要对包（模块）进行说明时，需要通过一个文件进行说明，称为 包描述文件
// 并且这个文件的名字固定的为 package.json，但不是必须要写的，不过一般都有
// 在这个描述文件中可以写任意内容，只要符合 json 的语法
// 但是有几项是必须的，例如 版本、名称、作者等

// 通常这个文件可以手工创建，也可以通过命令进行创建 
// 当使用命令创建时，需要在 包的根目录下，执行 npm init 即可 
// require('./cart');



require('cart');








